*ts-context-commentstring.txt*

==============================================================================
1. nvim-ts-context-commentstring                   *ts-context-commentstring*

*ts-context-commentstring* is a Neovim plugin that uses treesitter to set the 
'commentstring' option based on the cursor location in a file.

This is useful when there are embedded languages in certain types of files. 
For example, Vue files can have many different sections, each of which can 
have a different style for comments.

Note that this plugin **only** changes the 'commentstring' setting. It does 
not add any mappings for commenting. It is recommended to use a commenting 
plugin like [`vim-commentary`](https://github.com/tpope/vim-commentary/) 
alongside this plugin.

==============================================================================
2. Installation                       *ts-context-commentstring-installation*

Requires:

* [Neovim version 0.5](https://github.com/neovim/neovim/releases/tag/v0.5.0)
* [`nvim-treesitter`](https://github.com/nvim-treesitter/nvim-treesitter/)

Use your favorite plugin manager. For example, here's how it would look like
with Packer:

    ```lua
    use 'JoosepAlviste/nvim-ts-context-commentstring'
    ```

==============================================================================
3. Setup  *ts-context-commentstring-setup*

Enable the module from `nvim-treesitter` setup

    ```lua
    require'nvim-treesitter.configs'.setup {
      context_commentstring = {
        enable = true
      }
    }
    ```

It is recommended to use a commenting plugin like 
[`vim-commentary`](https://github.com/tpope/vim-commentary/) together with 
this plugin. `vim-commentary` provides the mappings for commenting which use 
the 'commentstring' setting. This plugin adds to that by correctly setting the 
'commentstring'setting so that `vim-commentary` can do its thing even in more 
complex filetypes.

==============================================================================
4. Commentstring configuration *ts-context-commentstring-commentstring-configuration*

Currently, the following languages are supported when they are injected with 
language tree (see `lua/ts_context_commentstring/internal.lua`):

- `javascript`
- `typescript`
- `tsx`
- `css`
- `scss`
- `php`
- `html`
- `svelte`
- `vue`
- `handlebars`
- `glimmer`
- `graphql`
- `lua`

This means that in any filetype, if the given languages are injected, this 
plugin should detect them and correctly set the 'commentstring'. For example, 
Vue files can be injected with `css` or `javascript`. Even though we don't 
configure anything for Vue explicitly, the 'commentstring' updating logic 
should still work.

Support for more languages can be added quite easily by passing a `config` table
when configuring the plugin:

    ```lua
    require'nvim-treesitter.configs'.setup {
      context_commentstring = {
        enable = true,
        config = {
          css = '// %s'
        }
      }
    }
    ```

Additionally, some languages are not injected with language tree, but have 
multiple commenting styles in the same language. One such example is 
JavaScript with JSX. The JSX section is not an injected language, but a part 
of the tree generated by the `javascript` treesitter parser.

In this more complex case, this plugin supports adding queries for specific 
treesitter nodes. Each node can have its own unique commenting style. For 
example, here's how the default configuration for `javascript` would look 
like:

    ```lua
    require'nvim-treesitter.configs'.setup {
      context_commentstring = {
        enable = true,
        config = {
          javascript = {
            __default = '// %s',
            jsx_element = '{/* %s */}',
            jsx_fragment = '{/* %s */}',
            jsx_attribute = '// %s',
            comment = '// %s'
          }
        }
      }
    }
    ```

The `__default` value is used when none of the other node types are seen. The 
rest of the keys refer to the type of the treesitter node. In this example, if 
your cursor is inside a `jsx_element`, then the `{/* %s */}` 'commentstring' 
will be set.

Note that the language refers to the |treesitter| language, not the filetype 
or the file extension.


==============================================================================
vim:tw=78:ts=8:ft=help:norl:
